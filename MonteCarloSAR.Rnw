\documentclass{article}
%\documentclass[12pt, legno]{article}

\usepackage[doublespacing]{setspace}
\usepackage[utf8]{inputenc}
\usepackage{graphics}
\usepackage[english]{babel}\selectlanguage{english}
\usepackage{float} %table repositioning
\usepackage{mathtools}
%\restylefloat{table}
\usepackage{caption}
\captionsetup[table]{skip=10pt} %space between caption and table
%\captionsetup{singlelinecheck = false} %deactivate centered captions
\usepackage{booktabs} % ein Paket zum setzen von qualitativ hochwertigen horizontalen Strichen in Tabellen
\usepackage{tabularx}
\usepackage[authoryear]{natbib}
\bibpunct{(}{)}{;}{a}{,}{,}
\usepackage{dcolumn}
\usepackage{rotating}
\usepackage{appendix}
\usepackage{longtable}
\usepackage{geometry}
\usepackage{endnotes}
\usepackage{amsthm}
\usepackage{chbibref}
\usepackage{indentfirst}
\usepackage{hyperref}
%\usepackage[backend=bibtex, sorting=none]{biblatex}
%\usepackage{sw55aer}

% the following two packages necessary to display ">" or "<" signs in tables created with kable
% from https://tex.stackexchange.com/questions/252119/knitr-less-greater-than-sign-displayed-as-and
\usepackage{lmodern}
\usepackage[T1]{fontenc}

%solution taken from https://stackoverflow.com/questions/26003574/dplyr-mutate-use-dynamic-variable-names
%https://www.r-bloggers.com/converting-a-string-to-a-variable-name-on-the-fly-and-vice-versa-in-r/

  \makeatletter
\let\@fnsymbol\@arabic
\makeatother

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % MARGINS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \oddsidemargin 0.0cm \topmargin -2.0cm \textwidth 16 cm \textheight 24.0cm

\renewcommand\floatpagefraction{.99}
\renewcommand\topfraction{.99}
\renewcommand\bottomfraction{.99}
\renewcommand\textfraction{.01}

\renewcommand{\baselinestretch}{1.5}

\begin{document}
%\SweaveOpts{concordance=TRUE}



<<setup, include=FALSE, cache=FALSE, echo = FALSE>>=
  cat("\014")
rm(list=ls(all=TRUE))

#Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\MiKTeX 2.9\\miktex\\bin\\x64", sep=.Platform$path.sep))

Sys.setlocale("LC_ALL","English")
#Sys.setlocale("LC_TIME", "en_US")
library( knitr       )
library( xtable      )
library( stargazer   )
library( readstata13 )
library( lubridate   )
library( tfplot      )
library( readxl      )
library( magrittr    )
library( tstools     )
library( tempdisagg  )
library( downloader  )
library( RPostgreSQL )
library( seasonal    )
library( dplyr       )
library( tidyr       ) # replace_na
library( stringr     )
library( kableExtra  )
library( tibble      )
library( R.utils     )
library( ggfortify   )
library( broom       )
library( changepoint )
library( strucchange )
library( ggpmisc     )
library( gridExtra   )
library( grid        )
library( causaldrf   )
library( lmtest      )
library( purrr       )  # functional programming
library( ggplot2     )  # plotting
library( simpleboot  )
library( reshape2    )  # melt command
library( mvtnorm     )
library( matlib      )
library( invgamma    )
library( rlist       )
library( coda        )
library( spdep       )

#set global chunk options: to be done, echo always FALSE?
opts_knit$set(root.dir='../') #working directory, does not work without this
#options(digits = 4) # works for figures in text, does not work for xtable
opts_chunk$set(fig.width = 13) #fig.align = "center", out.width = '0.9\\textwidth',
knitr::opts_chunk$set( fig.path = 'figures/' )
knitr::opts_chunk$set( echo = FALSE, warning = FALSE, message = FALSE)
# f <- function(x, options) {
#   lab <- paste0(options$fig.lp, options$label)
#   paste("\\end{kframe}\n",
#         "\\begin{figure}\n\\caption{", options$capT, "}\\label{", lab,"}\n",
#         hook_plot_tex(x, options),
#         "\\end{figure}\n\n\\begin{kframe}", sep = "")
# }
# knit_hooks$set(plot = f)
@


<<options, include=FALSE, cache=FALSE, echo = FALSE>>=
opt_model       = list()
opt_model$n     = 400
opt_model$phi   = 0.2
opt_model$mu    = 10
opt_model$sigm2 = 2

opt_model$only_incpt = FALSE # TRUE #

if( opt_model$only_incpt ){
  opt_model$beta = c( opt_model$mu ) %>% matrix( ncol = 1 )
}else{
  opt_model$beta = c( opt_model$mu, rep( 1, 2 ) ) %>% matrix( ncol = 1 )
}

@

<<functions, include=FALSE, cache=FALSE, echo = FALSE>>=
createWeightMatrix <- function( n ){
# create spatial weight matrix n x n with a "rook" neighbourhood system
# (i.e. neighbours are N, W, S, E )

  mW = matrix(0, ncol = n, nrow = n )
  i = seq( 1, n-1 )
  j = seq( 2, n   )
  ij = cbind( i, j); ij
  for( k in 1:(n-1) ){

    mW[ ij[k,1], ij[k,2] ] = 1
    mW[ ij[k,2], ij[k,1] ] = 1

  }
  i = seq(       1, n-sqrt(n) )
  j = seq( sqrt(n)+1, n   )
  ij = cbind( i, j); #ij
  for( k in 1:dim( ij )[1] ){

    mW[ ij[k,1], ij[k,2] ] = 1
    mW[ ij[k,2], ij[k,1] ] = 1

  }
  ### delete some zeros
  i = seq( sqrt(n), n - 1, sqrt(n) )
  j = i + 1
  ij = cbind( i, j);# ij
  for( k in 1:dim( ij )[1] ){

    mW[ ij[k,1], ij[k,2] ] = 0
    mW[ ij[k,2], ij[k,1] ] = 0

  }
  return( mW )
}
@


<<weight, include=FALSE, cache=FALSE, echo = FALSE>>=
mW = createWeightMatrix( opt_model$n )

eigenW = eigen( mW, symmetric = TRUE, only.values = TRUE, EISPACK = FALSE)
eigenWrange = 1 / range( eigenW$values ); eigenWrange

rankMatrix(mW, tol = NULL)
### normalize the weight matrix such that the largest eigenvalue is equal to one
# mW = mW * eigenWrange[ 2 ]

# mWnorm = mW * eigenWrange[ 2 ]
# eigenWnorm = eigen( mWnorm, symmetric = TRUE, only.values = TRUE, EISPACK = FALSE)
# range( eigenWnorm$values )

mB = mW * opt_model$phi

mCov = solve( diag( opt_model$n ) - mB ) %*% solve( diag( opt_model$n ) - t( mB ) ) * opt_model$sigm2

incpt <- rep( 1, opt_model$n)

if( opt_model$only_incpt ){
  mX = incpt %>% as.matrix %>% set_colnames( "incpt" )
}else{
  x1 = rep( seq( 1, sqrt( opt_model$n ) ), each = sqrt( opt_model$n ) )
  x2 = rep( seq( 1, sqrt( opt_model$n ) ), sqrt( opt_model$n ) )
  incpt
  mX  = cbind( x1, x2 )
  mX  = cbind( incpt, mX )
}

vE    <- rmvnorm( n=1, mean = rep(0, opt_model$n), sigma = mCov ) %>% t %>% as.data.frame
vY    <- mX %*% opt_model$beta + vE

dfYX = cbind( vY, mX ) %>% as.data.frame %>%
       set_colnames( c("y", colnames(mX) ) )

text.ols = paste( colnames( dfYX )[1], paste( colnames( dfYX )[-1], collapse = "+" ), sep = "~" )
text.ols = paste0( text.ols, "-1")

formula.ols = as.formula( text.ols )

ols <- lm( formula.ols, data = dfYX ); summary( ols )

### convert matrix to list
mWlist = mat2listw( mW, style="W"  )
summary( mWlist$neighbours )

@


<<maxlik, include=FALSE, cache=FALSE, echo = FALSE>>=
if(FALSE){
    ### style="W" and style="B"/"M" give different results
    moran.lm <- lm.morantest( ols, mWlist, alternative = "two.sided")
    moran.lm

    ### LMtest
    LM <- lm.LMtests( ols, mWlist, test = "all"); LM

    ### SAR model
    sar <- lagsarlm( formula.ols, data = dfYX, mWlist )
    summary( sar )


    ### SAR 2SLS
    sar2sls <- stsls( formula.ols, data = dfYX, mWlist )
    summary( sar2sls )

    ### SEM
    sem <-errorsarlm( formula.ols, data = dfYX, mWlist)
    summary(sem)

    ### SEM FGLS
    semfgls<-GMerrorsar( formula.ols, data = dfYX, mWlist )
    summary(semfgls)
    }
@

<<bayes, include=FALSE, cache=FALSE, echo = FALSE>>=
BayesSAR <- function( opt, y, x, w ){
  
  nobs = dim( y )[1]; nobs
  nreg = dim( x )[2]; nreg 
  
  mh_scale = opt$mh_scale
  
  ### extract eigenvalues from w
  w.eigen = eigen( w, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
  w.eigen.range = 1 / range( w.eigen$values ); w.eigen.range

  ### set range of phi  
  sPhi.low = w.eigen.range[1]
  sPhi.hgh = w.eigen.range[2]
  
  ### initialize parameters
  sPhi = 0
  mSigmaPhiInv = diag( nobs )
  mXSXInv      = solve( t(x) %*% x )
  vBetaPhiHat  = mXSXInv %*% t(x) %*% y
  vRes         = y - x %*% vBetaPhiHat
  sSPhi2       = t( vRes ) %*% vRes
  sLogD        = 0.5 * ( log( det( mSigmaPhiInv ) ) + log( det( mXSXInv ) ) ) - ( nobs - nreg ) / 2 * log( sSPhi2 ) ### (4.3) p. 335
  
  ### store simulation output
  mc_list = vector("list", length = opt$max_iter )
  
  mc_iter = list()
  mc_iter$vBeta       = 0
  mc_iter$sSigma2     = 0
  mc_iter$sPhi        = sPhi
  mc_iter$mXSXInv     = mXSXInv
  mc_iter$vBetaPhiHat = vBetaPhiHat
  mc_iter$sSPhi2      = sSPhi2
  mc_iter$sLogD       = sLogD
  mc_iter$sAccept     = 1
  
  mc_list[[1]] = mc_iter
  
  autotune_list = vector("list", length = opt_mc$max_iter / 100 )
  ### START LOOP
  for( iter in 2:opt_mc$max_iter ){ # iter = 8
  
      mc_iter_old = mc_list[[ iter - 1 ]]
  
      sPhi = mc_iter_old$sPhi
  
      ### STEP 1: MC RWMH step for Phi
      sPhiP = sPhi + rnorm( 1 ) * mh_scale
      if( sPhiP > sPhi.hgh | sPhiP < sPhi.low ){
        sLogDP = -Inf
      }else{
        mTemp = diag( nobs ) - w * sPhiP
        mSigmaPhiInv = mTemp %*% mTemp
        mXSXInv      = solve( t(x) %*% mSigmaPhiInv %*% x )
        vBetaPhiHat  = mXSXInv %*% ( t(x) %*% mSigmaPhiInv %*% y )
        vRes         = y - x %*% vBetaPhiHat
        sSPhi2       = t( vRes ) %*% mSigmaPhiInv %*% vRes
        sLogDP        = 0.5 * ( log( det( mSigmaPhiInv ) ) + log( det( mXSXInv ) ) ) - ( nobs - nreg ) / 2 * log( sSPhi2 ) ### (4.3) p. 335
  
        rm( mSigmaPhiInv )
        rm( vRes )
        rm( mTemp )
      }
  
      ### STEP 2: CHECK IMPROVEMENT IN LOGLIK
      if( sLogDP - sLogD > log( runif( 1 ) ) ){
        sPhi    = sPhiP
        sLogD   = sLogDP
        sAccept = 1
      }else{
        mXSXInv      = mc_iter_old$mXSXInv
        vBetaPhiHat  = mc_iter_old$vBetaPhiHat
        sSPhi2       = mc_iter_old$sSPhi2
        sAccept      = 0
      }
  
      ### STEP 3: GIBBS SAMPLING FOR SIGMA2 AND BETA
      sSigma2 = rinvgamma(1, shape = ( nobs - nreg ) / 2, rate = sSPhi2 / 2  )
      vBeta   = vBetaPhiHat + rmvnorm( n=1, sigma = mXSXInv * sSigma2 ) %>% t
  
      mc_iter = list()
      mc_iter$vBeta       = vBeta
      mc_iter$sSigma2     = sSigma2
      mc_iter$sPhi        = sPhi
      mc_iter$mXSXInv     = mXSXInv
      mc_iter$vBetaPhiHat = vBetaPhiHat
      mc_iter$sSPhi2      = sSPhi2
      mc_iter$sLogD       = sLogD
      mc_iter$sAccept     = sAccept
  
      mc_list[[ iter ]] = mc_iter
  
      if( opt$autotune$execute &  !( iter %% 100 ) ){
        sAccept_hist = lapply( mc_list, `[[`, "sAccept" ) %>% unlist %>% tail( n = 100 )
        sAccept_rate = mean( sAccept_hist )
        cat( "\n\n*** Iteration:", iter,"from", opt$max_iter,"***" )
        cat( "\n*** Acceptance rate:", round( sAccept_rate * 100 ),"% ***" )
        sAccept_rate = ifelse( sAccept_rate > 0 & sAccept_rate < 1, sAccept_rate, 0.0001 )
        sMulti = sAccept_rate / opt$autotune$target_accept_MH;
        mh_scale = ifelse( abs( sMulti - 1 ) > 0.1, sMulti * mh_scale, mh_scale )
        cat( "\n*** sMulti:", sMulti," mh_scale:", mh_scale, "opt$mh_scale:",opt$mh_scale )
        autotune_list[[ iter / 100 ]] = list( sAccept_rate = sAccept_rate, mh_scale = mh_scale )
      }
  
  
  }
  length( mc_list )
  mc_list       = list.remove( mc_list      , seq( 1, opt$ini_iter) )
  autotune_list = list.remove( autotune_list, seq( 1, opt$ini_iter / 100 ) )
  length( mc_list )

  return( list( mc_list = mc_list, autotune_list = autotune_list ) )
}

opt_mc = list()
opt_mc$ini_iter = 2000
opt_mc$max_iter = opt_mc$ini_iter + 2000
opt_mc$mh_scale =0.035 #  1 # 
opt_mc$autotune = list( execute = FALSE, target_accept_MH = 0.33 ) #  TRUE #

y = dfYX[, 1] %>% as.matrix
x = dfYX[,-1] %>% as.matrix
w = mW
opt = opt_mc

ud = BayesSAR( opt, y, x, w )

### COLLECT THE RESULTS
sPhi    = lapply( ud$mc_list, `[[`, "sPhi"    ) %>% unlist
sLogD   = lapply( ud$mc_list, `[[`, "sLogD"   ) %>% unlist
sAccept = lapply( ud$mc_list, `[[`, "sAccept" ) %>% unlist
mBetaPhiHat = do.call( "cbind", lapply( ud$mc_list, `[[`, "vBetaPhiHat" ) )
mBeta       = do.call( "cbind", lapply( ud$mc_list, `[[`, "vBeta" ) )
sSigma2     = lapply( ud$mc_list, `[[`, "sSigma2" ) %>% unlist


sAccept_rate = lapply( ud$autotune_list, `[[`, "sAccept_rate"    ) %>% unlist
mh_scale     = lapply( ud$autotune_list, `[[`, "mh_scale"    ) %>% unlist

plot( mh_scale, sAccept_rate )

mean( sAccept )
hist( sPhi )
hist( sSigma2 )

summary( sPhi )
summary( sSigma2 )
summary( t( mBeta ) )

plot( as.ts ( sPhi ) )
acf( sPhi )

raft = raftery.diag( sPhi, q=0.025, r=0.005, s=0.95, converge.eps=0.001)
print( raft ); raft$resmatrix

#gelman.diag( as.mcmc( sPhi ), confidence = 0.95, transform=FALSE, autoburnin=TRUE )
heidel.diag( as.mcmc( sPhi ), eps=0.1, pvalue=0.05)
geweke.diag( as.mcmc( sPhi ), frac1=0.1, frac2=0.5)



@

\bibliographystyle{chicago}

\end{document}
